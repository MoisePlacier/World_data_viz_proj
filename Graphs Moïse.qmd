---
title: "Graphs Moïse"
format: html
editor: visual
---


```{r}
dt <- as.data.table(dt)
dict <- as.data.table(dict)
scores_global <- as.data.table(scores_global)
scores <- copy(scores_global)

# Ajout du nom de souveraineté
scores <- merge(scores,geo_sf[, c("REF_AREA", "sovereignt")],by = "REF_AREA",all.x = TRUE)
scores[, REF_AREA := sovereignt]
scores[, c("sovereignt", "geometry") := NULL]

# ---- Paramètres ----
pays_ref  <- "Belgium"
pays_comp <- "Australia"   # ou "Moyenne"
groupe    <- "Dépenses en % du total des dépenses de santé"
selection_score <- "ressources_humaines_sante"
```


```{r}
vars_for_comp <- dict[var_group == "Dépenses en % du total des dépenses de santé", var_label_fr]
vars_for_comp
```


```{r}
# ---- Sélection du groupe de variables ----
vars_groupe <- dict[var_group == groupe, var_label_fr]
vars_groupe
```


```{r}
# ---- Transformation longue ----
df_long <- melt(
  dt[, c("REF_AREA", ..vars_for_comp)],
  id.vars = "REF_AREA",
  variable.name = "variable",
  value.name = "valeur"
)
```

```{r}
df_long
```


```{r}
df_long
```


```{r}
# Remplacement REF_AREA par le nom lisible
df_long[, REF_AREA := geo_sf$sovereignt[REF_AREA]]


```


```{r}
# ---- Statistiques globales ----
stats_globales <- df_long[, .(
  moyenne_globale = mean(valeur, na.rm = TRUE),
  valeur_max = max(valeur, na.rm = TRUE),
  valeur_min = min(valeur, na.rm = TRUE),
  pays_max = REF_AREA[which.max(valeur)],
  pays_min = REF_AREA[which.min(valeur)]
), by = variable]
```


```{r}
# ---- Identification des pays extrêmes selon un score ----
pays_meilleur <- scores[order(-get(selection_score)), REF_AREA][1]
pays_pire     <- scores[order(get(selection_score)), REF_AREA][1]

# ---- Extraction des valeurs pour ces pays ----
df_best <- df_long[REF_AREA == pays_meilleur, .(variable, valeur_meilleur = valeur)]
df_pire <- df_long[REF_AREA == pays_pire,     .(variable, valeur_pire = valeur)]

# ---- Fusion finale ----
df_long <- merge(df_long, moyenne, by = "variable", all.x = TRUE)

# Filtrage sur les deux pays à comparer
df_plot <- df_long[REF_AREA %in% c(pays_ref, pays_comp)]

# ---- Tri des variables selon le pays de référence ----
ordre_vars <- df_plot[REF_AREA == pays_ref][order(-valeur), variable]
df_plot[, variable := factor(variable, levels = ordre_vars)]
```




```{r}
df_plot
```













```{r}

# ---- Exemple : choix utilisateur simulé ----
# Dans Shiny ce sera input$choix_affichage (vector multiple)
user_choice <- c("moyenne_globale", "valeur_min", "valeur_max")

# ---- Base du plot ----
p <- plot_ly() %>%
  add_bars(
    data = df_plot,
    x = ~valeur,
    y = ~variable,
    textposition = "none", 
    color = ~REF_AREA,
    colors = c("#1f77b4", "#ff7f0e"),
    orientation = "h",
    hoverinfo = "text",
    text = ~paste0(REF_AREA, "<br>", variable, " : ", round(valeur, 2))
  )

# ---- Ajout conditionnel des couches selon le choix utilisateur ----
if ("moyenne_globale" %in% user_choice) {
  p <- p %>% add_trace(
    data = df_plot,
    x = ~moyenne_globale,
    y = ~variable,
    type = "scatter",
    mode = "markers",
    marker = list(color = "#2ca02c", size = 10, symbol = "circle"),
    name = "Moyenne globale",
    hoverinfo = "text",
    text = ~paste0("Moyenne globale<br>", variable, " : ", round(moyenne_globale, 2))
  )
}

if ("valeur_min" %in% user_choice) {
  p <- p %>% add_trace(
    data = df_plot,
    x = ~valeur_min,
    y = ~variable,
    type = "scatter",
    mode = "markers",
    marker = list(color = "#d62728", size = 9, symbol = "circle"),
    name = "Valeur min",
    hoverinfo = "text",
    text = ~paste0(
      "Valeur min<br>",
      variable, " : ", round(valeur_min, 2),
      "<br>Pays : ", pays_min
    )
  )
}

if ("valeur_max" %in% user_choice) {
  p <- p %>% add_trace(
    data = df_plot,
    x = ~valeur_max,
    y = ~variable,
    type = "scatter",
    mode = "markers",
    marker = list(color = "#9467bd", size = 9, symbol = "circle"),
    name = "Valeur max",
    hoverinfo = "text",
    text = ~paste0(
      "Valeur max<br>",
      variable, " : ", round(valeur_max, 2),
      "<br>Pays : ", pays_max
    )
  )
}

# ---- Mise en forme ----
p <- p %>% layout(
  barmode = "group",
  xaxis = list(title = "Valeur"),
  yaxis = list(
    title = ""  # masque les noms à gauche
  ),
  legend = list(title = list(text = "Indicateur")),
  hoverlabel = list(bgcolor = "white", font = list(size = 11))
)

p
```












